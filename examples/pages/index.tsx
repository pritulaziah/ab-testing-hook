import type { NextPage, GetServerSideProps } from 'next';
import Head from 'next/head';
import { v4 as uuidv4 } from 'uuid';
import MyExperiment from '../components/MyExperiment';
import { IExperiment, IExperimentGroup, ABTestProvider } from 'ab-testing-hook';
import { useState, useReducer, InputHTMLAttributes } from 'react';
import { PieChart } from 'react-minimal-pie-chart';

enum ActionKind {
  ChangeRange = 'changeRange',
}

type Action = {
  type: ActionKind.ChangeRange;
  payload: [number, number];
};

const reducer = (state: IMyExperiment, action: Action): IMyExperiment => {
  switch (action.type) {
    case ActionKind.ChangeRange:
      return {
        ...state,
        trafficPercentRange: action.payload,
      };
    default:
      return state;
  }
};

// For example enum
enum Devices {
  Desktop = 'desktop',
  Mobile = 'mobile',
  Tablet = 'tablet',
}

interface MyExperimentGroup extends IExperimentGroup {
  id: number;
}

interface IMyExperiment extends Omit<IExperiment, 'groups'> {
  devices: Devices[];
  groups: MyExperimentGroup[];
}

interface IProps {
  userId: string;
  experiments: IMyExperiment[];
}

interface TrafficRangeProps extends InputHTMLAttributes<HTMLInputElement> {
  children: React.ReactNode;
}

const TrafficRange = ({
  children,
  min,
  max,
  value,
  onChange,
}: TrafficRangeProps) => {
  return (
    <div className="flex flex-col mb-4 last-of-type:mb-0">
      <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">
        {children}
      </label>
      <input
        type="range"
        value={value}
        min={min}
        max={max}
        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
        onChange={onChange}
      />
    </div>
  );
};

const getColor = (index: number) => {
  const colors = ['#EC6B56', '#FFC154', '#47B39C', '#C13C37', '#E38627'];

  return colors[index];
};

const getTrafficData = (min: number, max: number) => {
  const totalTraffic = max - min;

  return [
    ...(totalTraffic !== 1
      ? [
          {
            title: 'Inactive traffic',
            value: 1 - totalTraffic,
            color: '#eee',
          },
        ]
      : []),
    {
      title: 'Active traffic',
      value: totalTraffic,
      color: '#008FFB',
    },
  ];
};

const converToPercentTraffic = (traffic: number) => Math.round(traffic * 100);

const Home: NextPage<IProps> = ({ userId, experiments }) => {
  const [exampleUserId, setExampleUserId] = useState(userId);
  const [exampleExperiment] = experiments;
  const [experiment, dispatch] = useReducer(reducer, exampleExperiment);
  const [minRange, maxRange] = Array.isArray(experiment.trafficPercentRange)
    ? experiment.trafficPercentRange
    : [0, experiment.trafficPercentRange || 1];

  return (
    <ABTestProvider userId={exampleUserId} experiments={experiment}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="max-w-screen-xl flex flex-col w-full mx-auto px-14 py-4">
        <div className="mb-10">
          <div className="flex flex-col items-start mb-4 lg:flex-row lg:items-center">
            <div className="text-lg text-slate-800 mb-2 lg:mb-0">
              Your userid: <span className="font-medium">{exampleUserId}</span>.
            </div>
            <button
              className="py-2 px-4 text-sm rounded-lg font-medium text-white bg-blue-700 hover:bg-blue-800 transition-colors lg:ml-2"
              onClick={() => setExampleUserId(uuidv4())}
            >
              Click to change uuid
            </button>
          </div>
          <div className="flex flex-col">
            <h4 className="text-md text-slate-800 mb-2 font-medium">
              Example experiment: {experiment.name}
            </h4>
            <div className="flex flex-col ">
              <div className="flex mb-4">
                <div className="h-64">
                  <PieChart
                    data={experiment.groups.map((group, index) => ({
                      title: group.name,
                      value: group.weight,
                      color: getColor(index),
                    }))}
                    label={({ dataEntry }) =>
                      `${dataEntry.title}: ${Math.round(dataEntry.percentage)}%`
                    }
                    labelStyle={{
                      fontSize: '5px',
                    }}
                  />
                </div>
              </div>
              <div className="flex items-center">
                <div className="h-64">
                  <PieChart
                    data={getTrafficData(minRange, maxRange)}
                    label={({ dataEntry }) =>
                      `${dataEntry.title}: ${Math.round(dataEntry.percentage)}%`
                    }
                    labelStyle={{
                      fontSize: '5px',
                    }}
                  />
                </div>
                <div className="flex flex-col ml-4 w-60">
                  <TrafficRange
                    value={converToPercentTraffic(minRange)}
                    min={0}
                    max={converToPercentTraffic(maxRange)}
                    onChange={(event) =>
                      dispatch({
                        type: ActionKind.ChangeRange,
                        payload: [Number(event.target.value) / 100, maxRange],
                      })
                    }
                  >{`Min traffic range ${converToPercentTraffic(
                    minRange,
                  )}%`}</TrafficRange>
                  <TrafficRange
                    value={converToPercentTraffic(maxRange)}
                    min={converToPercentTraffic(minRange)}
                    max={100}
                    onChange={(event) =>
                      dispatch({
                        type: ActionKind.ChangeRange,
                        payload: [minRange, Number(event.target.value) / 100],
                      })
                    }
                  >{`Max traffic range ${converToPercentTraffic(
                    maxRange,
                  )}%`}</TrafficRange>
                </div>
              </div>
            </div>
          </div>
        </div>
        <MyExperiment />
      </div>
    </ABTestProvider>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  // from cookie get user identifier if dont have generate and set
  const userId = uuidv4();
  // from backend get experiments, filtering by device, statuses, etc
  const experiments: IMyExperiment[] = [
    {
      devices: [Devices.Desktop],
      name: 'new_button',
      groups: [
        {
          id: 1,
          name: 'variantA',
          weight: 0.4, // 40%
        },
        {
          id: 2,
          name: 'variantB',
          weight: 0.6, // 60%,
        },
      ],
      trafficPercentRange: [0.2, 0.7], // 50%
    },
  ];

  return { props: { userId, experiments } };
};

export default Home;
